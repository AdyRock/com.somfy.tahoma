'use strict';/**
 * Module with generic helper functions
 * @module GenericHelper
 * @example
 * const genericHelper = require('./lib/helper').Generic;
 **/ /**
 * Checks if the argument is a function
 * @name isFunction
 * @function
 * @public
 * @param {Object} obj - Object to check if it is a function
 * @returns {boolean}
 */var cov_2gsl5z3p77=function(){var path="/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/helper/generic.js",hash="94ca67c2e63e643c27f2f6dff82c51fb404d89f1",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/helper/generic.js",statementMap:{"0":{start:{line:18,column:19},end:{line:18,column:77}},"1":{start:{line:18,column:26},end:{line:18,column:77}},"2":{start:{line:28,column:19},end:{line:31,column:1}},"3":{start:{line:29,column:2},end:{line:29,column:68}},"4":{start:{line:29,column:23},end:{line:29,column:68}},"5":{start:{line:30,column:2},end:{line:30,column:28}},"6":{start:{line:41,column:24},end:{line:44,column:1}},"7":{start:{line:42,column:2},end:{line:42,column:77}},"8":{start:{line:42,column:29},end:{line:42,column:77}},"9":{start:{line:43,column:2},end:{line:43,column:29}},"10":{start:{line:59,column:13},end:{line:59,column:59}},"11":{start:{line:59,column:25},end:{line:59,column:59}},"12":{start:{line:59,column:46},end:{line:59,column:58}},"13":{start:{line:59,column:51},end:{line:59,column:58}},"14":{start:{line:62,column:21},end:{line:62,column:46}},"15":{start:{line:72,column:14},end:{line:81,column:1}},"16":{start:{line:72,column:23},end:{line:81,column:1}},"17":{start:{line:73,column:14},end:{line:73,column:16}},"18":{start:{line:74,column:2},end:{line:78,column:3}},"19":{start:{line:75,column:4},end:{line:75,column:22}},"20":{start:{line:77,column:4},end:{line:77,column:47}},"21":{start:{line:79,column:2},end:{line:79,column:45}},"22":{start:{line:80,column:2},end:{line:80,column:15}},"23":{start:{line:83,column:0},end:{line:89,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:19},end:{line:18,column:20}},loc:{start:{line:18,column:26},end:{line:18,column:77}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:28,column:19},end:{line:28,column:20}},loc:{start:{line:28,column:28},end:{line:31,column:1}},line:28},"2":{name:"(anonymous_2)",decl:{start:{line:41,column:24},end:{line:41,column:25}},loc:{start:{line:41,column:33},end:{line:44,column:1}},line:41},"3":{name:"(anonymous_3)",decl:{start:{line:59,column:13},end:{line:59,column:14}},loc:{start:{line:59,column:25},end:{line:59,column:59}},line:59},"4":{name:"(anonymous_4)",decl:{start:{line:59,column:36},end:{line:59,column:37}},loc:{start:{line:59,column:46},end:{line:59,column:58}},line:59},"5":{name:"(anonymous_5)",decl:{start:{line:59,column:46},end:{line:59,column:47}},loc:{start:{line:59,column:51},end:{line:59,column:58}},line:59},"6":{name:"(anonymous_6)",decl:{start:{line:72,column:14},end:{line:72,column:15}},loc:{start:{line:72,column:23},end:{line:81,column:1}},line:72},"7":{name:"(anonymous_7)",decl:{start:{line:72,column:23},end:{line:72,column:24}},loc:{start:{line:72,column:32},end:{line:81,column:1}},line:72}},branchMap:{"0":{loc:{start:{line:18,column:29},end:{line:18,column:76}},type:"binary-expr",locations:[{start:{line:18,column:29},end:{line:18,column:32}},{start:{line:18,column:36},end:{line:18,column:51}},{start:{line:18,column:55},end:{line:18,column:63}},{start:{line:18,column:67},end:{line:18,column:76}}],line:18},"1":{loc:{start:{line:29,column:2},end:{line:29,column:68}},type:"if",locations:[{start:{line:29,column:2},end:{line:29,column:68}},{start:{line:29,column:2},end:{line:29,column:68}}],line:29},"2":{loc:{start:{line:42,column:2},end:{line:42,column:77}},type:"if",locations:[{start:{line:42,column:2},end:{line:42,column:77}},{start:{line:42,column:2},end:{line:42,column:77}}],line:42}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{"0":[0,0,0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_2gsl5z3p77.s[0]++;const isFunction=obj=>{cov_2gsl5z3p77.f[0]++;cov_2gsl5z3p77.s[1]++;return!!((cov_2gsl5z3p77.b[0][0]++,obj)&&(cov_2gsl5z3p77.b[0][1]++,obj.constructor)&&(cov_2gsl5z3p77.b[0][2]++,obj.call)&&(cov_2gsl5z3p77.b[0][3]++,obj.apply));};/**
 * Transforms an object to an array
 * @name objToArray
 * @function
 * @public
 * @param {Object} obj - Object to transform to array
 * @returns {Array}
 */cov_2gsl5z3p77.s[2]++;const objToArray=obj=>{cov_2gsl5z3p77.f[1]++;cov_2gsl5z3p77.s[3]++;if(isFunction(obj)){cov_2gsl5z3p77.b[1][0]++;cov_2gsl5z3p77.s[4]++;throw new TypeError('obj is not a function');}else{cov_2gsl5z3p77.b[1][1]++;}cov_2gsl5z3p77.s[5]++;return Object.values(obj);};/**
 * Returns the last item in an array
 * @name getLastItemFrom
 * @function
 * @public
 * @param {Array} array - array to get the last item from
 * @returns {Object}
 */cov_2gsl5z3p77.s[6]++;const getLastItemFrom=array=>{cov_2gsl5z3p77.f[2]++;cov_2gsl5z3p77.s[7]++;if(!Array.isArray(array)){cov_2gsl5z3p77.b[2][0]++;cov_2gsl5z3p77.s[8]++;throw new TypeError('argument is not an array');}else{cov_2gsl5z3p77.b[2][1]++;}cov_2gsl5z3p77.s[9]++;return array.slice().pop();};/**
 * Creates a new function which executes the given functions where each function's return value is the next one's input
 * @name pipe
 * @function
 * @public
 * @example
 * const add = x => x+1;
 * const dbl = x => x*2;
 * const addThenDbl = genericHelper.pipe(add, dbl);
 * const result = addThenDbl(2); // result = 6
 * @param {Array} fns - Array of function to create the pipe from
 * @returns {Function}
 */cov_2gsl5z3p77.s[10]++;const pipe=(...fns)=>{cov_2gsl5z3p77.f[3]++;cov_2gsl5z3p77.s[11]++;return fns.reduce((a,b)=>{cov_2gsl5z3p77.f[4]++;cov_2gsl5z3p77.s[12]++;return x=>{cov_2gsl5z3p77.f[5]++;cov_2gsl5z3p77.s[13]++;return b(a(x));};});};const stackPattern=(cov_2gsl5z3p77.s[14]++,/(\(.+:[0-9]+:[0-9]+\))/g);/**
 * Logs given label, value and file + linenumber (where the trace function is invoked) to the console
 * @function
 * @public
 * @example
 * const value = genericHelper.trace('label')('value');
 * @param {string} label - the label for the value
 * @returns {Function} functions which accepts the value to log as an argument
 */cov_2gsl5z3p77.s[15]++;const trace=label=>{cov_2gsl5z3p77.f[6]++;cov_2gsl5z3p77.s[16]++;return value=>{cov_2gsl5z3p77.f[7]++;let stack=(cov_2gsl5z3p77.s[17]++,'');cov_2gsl5z3p77.s[18]++;try{cov_2gsl5z3p77.s[19]++;throw new Error();}catch(error){cov_2gsl5z3p77.s[20]++;stack=error.stack.match(stackPattern)[1];}cov_2gsl5z3p77.s[21]++;console.log(`${label}: ${value} ${stack}`);cov_2gsl5z3p77.s[22]++;return value;};};cov_2gsl5z3p77.s[23]++;module.exports={isFunction,objToArray,getLastItemFrom,pipe,trace};