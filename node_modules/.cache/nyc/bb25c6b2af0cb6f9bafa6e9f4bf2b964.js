'use strict';/* eslint-disable no-use-before-define */var cov_2lr0matp9=function(){var path="/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/Tahoma.js",hash="1f4c6179ddc004ddb3318cc2c02a4b657f15791e",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/Tahoma.js",statementMap:{"0":{start:{line:5,column:14},end:{line:5,column:30}},"1":{start:{line:21,column:20},end:{line:27,column:5}},"2":{start:{line:29,column:4},end:{line:29,column:36}},"3":{start:{line:37,column:20},end:{line:39,column:5}},"4":{start:{line:41,column:4},end:{line:41,column:36}},"5":{start:{line:50,column:20},end:{line:52,column:5}},"6":{start:{line:54,column:4},end:{line:54,column:35}},"7":{start:{line:63,column:20},end:{line:65,column:5}},"8":{start:{line:67,column:4},end:{line:67,column:35}},"9":{start:{line:80,column:20},end:{line:82,column:5}},"10":{start:{line:84,column:4},end:{line:84,column:35}},"11":{start:{line:109,column:20},end:{line:123,column:5}},"12":{start:{line:125,column:4},end:{line:125,column:36}},"13":{start:{line:135,column:20},end:{line:137,column:5}},"14":{start:{line:139,column:4},end:{line:139,column:36}},"15":{start:{line:149,column:20},end:{line:151,column:5}},"16":{start:{line:153,column:4},end:{line:153,column:38}},"17":{start:{line:157,column:0},end:{line:157,column:24}},"18":{start:{line:159,column:19},end:{line:159,column:42}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:20,column:2},end:{line:20,column:3}},loc:{start:{line:20,column:35},end:{line:30,column:3}},line:20},"1":{name:"(anonymous_1)",decl:{start:{line:36,column:2},end:{line:36,column:3}},loc:{start:{line:36,column:18},end:{line:42,column:3}},line:36},"2":{name:"(anonymous_2)",decl:{start:{line:49,column:2},end:{line:49,column:3}},loc:{start:{line:49,column:17},end:{line:55,column:3}},line:49},"3":{name:"(anonymous_3)",decl:{start:{line:62,column:2},end:{line:62,column:3}},loc:{start:{line:62,column:27},end:{line:68,column:3}},line:62},"4":{name:"(anonymous_4)",decl:{start:{line:79,column:2},end:{line:79,column:3}},loc:{start:{line:79,column:59},end:{line:85,column:3}},line:79},"5":{name:"(anonymous_5)",decl:{start:{line:108,column:2},end:{line:108,column:3}},loc:{start:{line:108,column:54},end:{line:126,column:3}},line:108},"6":{name:"(anonymous_6)",decl:{start:{line:134,column:2},end:{line:134,column:3}},loc:{start:{line:134,column:37},end:{line:140,column:3}},line:134},"7":{name:"(anonymous_7)",decl:{start:{line:148,column:2},end:{line:148,column:3}},loc:{start:{line:148,column:38},end:{line:154,column:3}},line:148}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const Homey=(cov_2lr0matp9.s[0]++,require('homey'));/**
 * Class for communicating with the TaHoma cloud service
 * @hideconstructor
 */class Tahoma extends(Homey.SimpleClass){/**
	 * Logs in the TaHoma service with the provided login credentials
	 * @param {string} username - Username which is used to login in TaHoma
	 * @param {string} password - Password which is used to login in TaHoma
	 * @returns {Promise<Object>}
	 * @async
	 */static login(username,password){cov_2lr0matp9.f[0]++;const options=(cov_2lr0matp9.s[1]++,{uri:'/login',form:{userId:username,userPassword:password}});cov_2lr0matp9.s[2]++;return HttpHelper.post(options);}/**
	 * Logout of the TaHoma service
	 * @returns {Promise<Object>}
	 * @async
	 */static logout(){cov_2lr0matp9.f[1]++;const options=(cov_2lr0matp9.s[3]++,{uri:'/logout'});cov_2lr0matp9.s[4]++;return HttpHelper.post(options);}/**
	 * Gets the TaHoma device setup
	 * @returns {Promise<Object>}
	 * @async
	 */static setup(){cov_2lr0matp9.f[2]++;const options=(cov_2lr0matp9.s[5]++,{uri:'/setup'});cov_2lr0matp9.s[6]++;return HttpHelper.get(options);}/**
	 * Gets the actionGroups from TaHoma
	 * @returns {Promise<Object>}
	 * @async
	 */static getActionGroups(){cov_2lr0matp9.f[3]++;const options=(cov_2lr0matp9.s[7]++,{uri:'/actionGroups'});cov_2lr0matp9.s[8]++;return HttpHelper.get(options);}/**
	 * Gets the device state history from TaHoma
	 * @param {string} deviceUrl - The device url for the device as defined in TaHoma
	 * @param {string} state - The device state for which to retrieve the hisory
	 * @param {timestamp} from - The timestamp from which to retrieve the history
	 * @param {timestamp} to - The timestamp until to retrieve the history
	 * @returns {Promise<Object>}
	 * @async
	 */static getDeviceStateHistory(deviceUrl,state,from,to){cov_2lr0matp9.f[4]++;const options=(cov_2lr0matp9.s[9]++,{uri:'/setup/devices/'+encodeURIComponent(deviceUrl)+'/states/'+encodeURIComponent(state)+'/history/'+from+'/'+to});cov_2lr0matp9.s[10]++;return HttpHelper.get(options);}/**
	 * Executes an action on a give device in TaHoma
	 * @param {string} name - Name of the device
	 * @param {string} deviceUrl - Url of the device
	 * @param {Object} action - An object defining the action to be executed in TaHoma
	 * @example
	 * const action = {
	 *    name: 'open',
	 *    parameters: []
	 * };
	 *
	 * Tahoma.executeDeviceAction('device name', 'url/of/the/device', action)
	 *    .then(result => {
	 *       //process result
	 *    })
	 *    .catch(error => {
	 *       //handle error
	 *    });
	 * @returns {Promise<Object>}
	 * @async
	 */static executeDeviceAction(name,deviceUrl,action){cov_2lr0matp9.f[5]++;const options=(cov_2lr0matp9.s[11]++,{uri:'/exec/apply',json:true,body:{label:name+' - '+action.name+'  - Homey',actions:[{deviceURL:deviceUrl,commands:[action]}]}});cov_2lr0matp9.s[12]++;return HttpHelper.post(options);}/**
	 * Executes a TaHoma scenario
	 * @param {string} scenarioId - The id of the scenario (oid in TaHoma)
	 * @returns {Promise<Object>}
	 * @async
	 */static executeScenario(scenarioId){cov_2lr0matp9.f[6]++;const options=(cov_2lr0matp9.s[13]++,{uri:'/exec/'+scenarioId});cov_2lr0matp9.s[14]++;return HttpHelper.post(options);}/**
	 * Cancels the execution of a previously defined action
	 * @param {string} executionId - The execution id of the action
	 * @returns {Promise<Object>}
	 * @async
	 */static cancelExecution(executionId){cov_2lr0matp9.f[7]++;const options=(cov_2lr0matp9.s[15]++,{uri:'/exec/current/setup/'+executionId});cov_2lr0matp9.s[16]++;return HttpHelper.delete(options);}}cov_2lr0matp9.s[17]++;module.exports=Tahoma;const HttpHelper=(cov_2lr0matp9.s[18]++,require('./HttpHelper'));