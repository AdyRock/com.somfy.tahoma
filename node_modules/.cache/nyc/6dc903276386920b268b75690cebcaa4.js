'use strict';var cov_2hkqn0gtyq=function(){var path="/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/helper/driver.js",hash="964994c95df47e1fd49974d884ea618d5a3017df",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/helper/driver.js",statementMap:{"0":{start:{line:3,column:22},end:{line:3,column:42}},"1":{start:{line:4,column:21},end:{line:4,column:40}},"2":{start:{line:21,column:19},end:{line:21,column:111}},"3":{start:{line:21,column:30},end:{line:21,column:111}},"4":{start:{line:21,column:52},end:{line:21,column:71}},"5":{start:{line:21,column:92},end:{line:21,column:105}},"6":{start:{line:34,column:16},end:{line:34,column:91}},"7":{start:{line:36,column:0},end:{line:39,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:21,column:19},end:{line:21,column:20}},loc:{start:{line:21,column:30},end:{line:21,column:111}},line:21},"1":{name:"(anonymous_1)",decl:{start:{line:21,column:42},end:{line:21,column:43}},loc:{start:{line:21,column:52},end:{line:21,column:71}},line:21},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:80},end:{line:21,column:81}},loc:{start:{line:21,column:92},end:{line:21,column:105}},line:21}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},f:{"0":0,"1":0,"2":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const genericHelper=(cov_2hkqn0gtyq.s[0]++,require('./generic'));const deviceHelper=(cov_2hkqn0gtyq.s[1]++,require('./device'));/**
 * Module with driver specific helper functions
 * @module DriverHelper
 * @example
 * const driverHelper = require('./lib/helper').Driver;
 **/ /**
 * Gets all the devices from the given drivers in a flat array
 * @name getDevices
 * @function
 * @public
 * @param {Array} driver - Array with drivers to get the devices from
 * @returns {Array} devices
 */cov_2hkqn0gtyq.s[2]++;const getDevices=drivers=>{cov_2hkqn0gtyq.f[0]++;cov_2hkqn0gtyq.s[3]++;return drivers.map(driver=>{cov_2hkqn0gtyq.f[1]++;cov_2hkqn0gtyq.s[4]++;return driver.getDevices();}).reduce((acc,x)=>{cov_2hkqn0gtyq.f[2]++;cov_2hkqn0gtyq.s[5]++;return acc.concat(x);},[]);};/**
 * Syncs all the devices from the given drivers by calling sync() on each device
 * @name syncAll
 * @function
 * @public
 * @param {Object} drivers - The drivers as returned from Homey.ManagerDrivers.getDrivers()
 * @param {Array} devices - Array with devices as provided by theTahoma api
 * @returns {Array} devices
 * @example
 * driverHelper.syncAll(Homey.ManagerDrivers.getDrivers())(data.devices);
 */const syncAll=(cov_2hkqn0gtyq.s[6]++,genericHelper.pipe(genericHelper.objToArray,getDevices,deviceHelper.sync));cov_2hkqn0gtyq.s[7]++;module.exports={getDevices,syncAll};