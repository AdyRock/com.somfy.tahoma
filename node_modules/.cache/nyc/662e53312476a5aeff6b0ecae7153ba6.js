'use strict';/**
 * Module with device specific helper functions
 * @module DeviceHelper
 * @example
 * const deviceHelper = require('./lib/helper').Device;
 **/ /**
 * Checks if the id argument is the same as the oid property of the device argument
 * @name isSameDevice
 * @function
 * @public
 * @param {string} id - device id
 * @param {Object} device - device object to check the id against
 * @returns {boolean}
 * @example
 * const id = 'abc';
 * const device = {
 *    oid: 'abc'
 * }
 * const result = isSameDevice(id)(device); // result = true
 */var cov_125q94imh5=function(){var path="/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/helper/device.js",hash="00e981cb7e0622fc2e9d4eb05d48a7ce61e1366a",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/lennart.kuijs/Documents/Dev/com.somfy.tahoma/lib/helper/device.js",statementMap:{"0":{start:{line:25,column:21},end:{line:29,column:1}},"1":{start:{line:25,column:27},end:{line:29,column:1}},"2":{start:{line:26,column:2},end:{line:26,column:61}},"3":{start:{line:26,column:48},end:{line:26,column:61}},"4":{start:{line:27,column:2},end:{line:27,column:24}},"5":{start:{line:28,column:2},end:{line:28,column:27}},"6":{start:{line:51,column:13},end:{line:54,column:1}},"7":{start:{line:52,column:2},end:{line:52,column:78}},"8":{start:{line:52,column:31},end:{line:52,column:78}},"9":{start:{line:53,column:2},end:{line:53,column:58}},"10":{start:{line:53,column:17},end:{line:53,column:57}},"11":{start:{line:53,column:39},end:{line:53,column:56}},"12":{start:{line:56,column:0},end:{line:59,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:25,column:21},end:{line:25,column:22}},loc:{start:{line:25,column:27},end:{line:29,column:1}},line:25},"1":{name:"(anonymous_1)",decl:{start:{line:25,column:27},end:{line:25,column:28}},loc:{start:{line:25,column:37},end:{line:29,column:1}},line:25},"2":{name:"(anonymous_2)",decl:{start:{line:51,column:13},end:{line:51,column:14}},loc:{start:{line:51,column:24},end:{line:54,column:1}},line:51},"3":{name:"(anonymous_3)",decl:{start:{line:53,column:9},end:{line:53,column:10}},loc:{start:{line:53,column:17},end:{line:53,column:57}},line:53},"4":{name:"(anonymous_4)",decl:{start:{line:53,column:29},end:{line:53,column:30}},loc:{start:{line:53,column:39},end:{line:53,column:56}},line:53}},branchMap:{"0":{loc:{start:{line:26,column:2},end:{line:26,column:61}},type:"if",locations:[{start:{line:26,column:2},end:{line:26,column:61}},{start:{line:26,column:2},end:{line:26,column:61}}],line:26},"1":{loc:{start:{line:26,column:6},end:{line:26,column:46}},type:"binary-expr",locations:[{start:{line:26,column:6},end:{line:26,column:22}},{start:{line:26,column:26},end:{line:26,column:46}}],line:26},"2":{loc:{start:{line:27,column:11},end:{line:27,column:23}},type:"binary-expr",locations:[{start:{line:27,column:11},end:{line:27,column:17}},{start:{line:27,column:21},end:{line:27,column:23}}],line:27},"3":{loc:{start:{line:52,column:2},end:{line:52,column:78}},type:"if",locations:[{start:{line:52,column:2},end:{line:52,column:78}},{start:{line:52,column:2},end:{line:52,column:78}}],line:52}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_125q94imh5.s[0]++;const isSameDevice=id=>{cov_125q94imh5.f[0]++;cov_125q94imh5.s[1]++;return device=>{cov_125q94imh5.f[1]++;cov_125q94imh5.s[2]++;if((cov_125q94imh5.b[1][0]++,id===undefined)&&(cov_125q94imh5.b[1][1]++,device===undefined)){cov_125q94imh5.b[0][0]++;cov_125q94imh5.s[3]++;return false;}else{cov_125q94imh5.b[0][1]++;}cov_125q94imh5.s[4]++;device=(cov_125q94imh5.b[2][0]++,device)||(cov_125q94imh5.b[2][1]++,{});cov_125q94imh5.s[5]++;return id===device.oid;};};/**
 * Calls the sync method of all the device objects in the devices array
 * @name sync
 * @function
 * @public
 * @param {Array} devices - An array with devices on which to call the sync() method
 * @param {Object} data - device data as provided by the TaHoma api
 * @returns {Function}
 * @example
 * const data = {};
 * const devices = [
 *   {
 *      // ... device properties
 *      sync: function(data) {
 *        //...	process data
 *      }
 *   }
 * ];
 * sync(devices)(data);
 */cov_125q94imh5.s[6]++;const sync=devices=>{cov_125q94imh5.f[2]++;cov_125q94imh5.s[7]++;if(!Array.isArray(devices)){cov_125q94imh5.b[3][0]++;cov_125q94imh5.s[8]++;throw new TypeError('devices is not an array');}else{cov_125q94imh5.b[3][1]++;}cov_125q94imh5.s[9]++;return data=>{cov_125q94imh5.f[3]++;cov_125q94imh5.s[10]++;return devices.map(device=>{cov_125q94imh5.f[4]++;cov_125q94imh5.s[11]++;return device.sync(data);});};};cov_125q94imh5.s[12]++;module.exports={isSameDevice,sync};